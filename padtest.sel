(3,3,50)
Generated by Quintopia's Select. Code Generator version 0.6
GET. 
   
   REAL PART:
   RIGHT. EXP. LEFT. SELECT.
   RIGHT. LOG. RIGHT. SELECT.
   LEFT. CONJ.  
      
      ADD:
      RIGHT. EXP. LEFT. LEFT. SELECT.
      RIGHT. RIGHT. RIGHT. EXP. LEFT. LEFT. SELECT.
      RIGHT. 
         
         (multiply)
         RIGHT. RIGHT. EXP. LEFT. LEFT. SELECT.
         RIGHT. RIGHT. EXP. LEFT. SELECT.
         RIGHT. LOG. RIGHT. SELECT.
         LEFT. 
      LOG. RIGHT. SELECT.
       
      END ADD
 
      
      MAKE 1/2:
      RIGHT. EXP. SELECT.
      EXP. LEFT. SELECT.
      RIGHT. LOG. LEFT. SELECT.
      LOG. RIGHT. SELECT.
      EXP. LEFT. SELECT.
      
      END MAKE 1/2
 
      (multiply)
      RIGHT. EXP. LEFT. SELECT.
      RIGHT. EXP. LEFT. LEFT. SELECT.
      RIGHT. RIGHT. LOG. RIGHT. SELECT.
      LEFT. 
   
   END REAL PART
   
PRINT. 
MARK AS x
 
IF ZERO (zerotest):
 
   MAGNITUDE:
   RIGHT. 
      
      MAKE 1/2:
      RIGHT. EXP. SELECT.
      EXP. LEFT. SELECT.
      RIGHT. LOG. LEFT. SELECT.
      LOG. RIGHT. SELECT.
      EXP. LEFT. SELECT.
      
      END MAKE 1/2
      
   RIGHT. EXP. LEFT. LEFT. SELECT.
   RIGHT. RIGHT. LOG. RIGHT. SELECT.
   LEFT. CONJ. 
      
      (multiply)
      RIGHT. EXP. LEFT. SELECT.
      RIGHT. EXP. LEFT. LEFT. LEFT. SELECT.
      RIGHT. RIGHT. RIGHT. LOG. RIGHT. SELECT.
      LEFT. 
   EXP. LEFT. LEFT. SELECT.
   RIGHT. RIGHT. 
   END MAGNITUDE
 
   IF (zerotest):
   LOOP. 
   MARK AS ifstartzerotest
   
      RIGHT. EXP. LEFT. LEFT. LEFT. LEFT. SELECT.
      RIGHT. RIGHT. RIGHT. RIGHT. LOG. RIGHT. SELECT.
      RIGHT. RIGHT. RIGHT. RIGHT. LOG. SELECT.
      LOG. RIGHT. SELECT.
      LEFT. PRINT. HALT. 
!!!!PROGRAM EXIT POINT!!!!
RIGHT. 
      MARK AS ifonezerotest
      RIGHT. LOG. SELECT.
      LOG. RIGHT. SELECT.
      LEFT. LEFT. 
   END. RIGHT. 
      
      LOGICAL NOT:
      RIGHT. LOG. SELECT.
      LOG. RIGHT. SELECT.
      LEFT. EXP. LEFT. SELECT.
      RIGHT. 
      END NOT
 
   ELSE (zerotest):
   LOOP. 
   MARK AS ifelsezerotest
   
      RIGHT. EXP. LEFT. LEFT. LEFT. SELECT.
      RIGHT. RIGHT. RIGHT. LOG. RIGHT. SELECT.
      LEFT. ({RIGHT. RIGHT. RIGHT. RIGHT. RIGHT. RIGHT. })
   END. 
   END IF (zerotest)
 
FETCH x
EXP. LEFT. LEFT. LEFT. LEFT. LEFT. LEFT. LEFT. LEFT. LEFT. LEFT. LEFT. LEFT. SELECT.
RIGHT. RIGHT. RIGHT. RIGHT. RIGHT. RIGHT. RIGHT. RIGHT. RIGHT. RIGHT. RIGHT. RIGHT. LOG. RIGHT. SELECT.
LEFT. 
x FETCHED
 
MARK AS x
PRINT. 
   
   IF (negtest):
   LOOP. 
   MARK AS ifstartnegtest
   
      RIGHT. 
         
         MAKE I:
 
            MAKE 1/2:
            RIGHT. EXP. SELECT.
            EXP. LEFT. SELECT.
            RIGHT. LOG. LEFT. SELECT.
            LOG. RIGHT. SELECT.
            EXP. LEFT. SELECT.
            
            END MAKE 1/2
            
         RIGHT. 
            
            MAKE -1:
 
               MAKE 1/K:
               RIGHT. EXP. SELECT.
               LEFT. LOG. RIGHT. SELECT.
               EXP. LEFT. SELECT.
               
               MARK AS makenumsign
               LOG. RIGHT. SELECT.
               
               END MAKE 1/K
               
            LEFT. 
            END MAKE -1
            
         EXP. LEFT. SELECT.
         RIGHT. 
         END MAKE I
 
         ADD:
         RIGHT. EXP. LEFT. SELECT.
         RIGHT. RIGHT. EXP. LEFT. LEFT. LEFT. LEFT. SELECT.
         RIGHT. RIGHT. RIGHT. 
            
            (multiply)
            RIGHT. RIGHT. EXP. LEFT. LEFT. SELECT.
            RIGHT. RIGHT. EXP. LEFT. SELECT.
            RIGHT. LOG. RIGHT. SELECT.
            LEFT. 
         LOG. RIGHT. SELECT.
         LEFT. 
         END ADD
         
      PRINT. ({RIGHT. })RIGHT. 
      MARK AS ifonenegtest
      RIGHT. LOG. SELECT.
      LOG. RIGHT. SELECT.
      LEFT. LEFT. 
   END. RIGHT. 
      
      LOGICAL NOT:
      RIGHT. LOG. SELECT.
      LOG. RIGHT. SELECT.
      LEFT. EXP. LEFT. SELECT.
      RIGHT. 
      END NOT
 
   ELSE (negtest):
   LOOP. 
   MARK AS ifelsenegtest
   
      RIGHT. EXP. LEFT. LEFT. LEFT. SELECT.
      RIGHT. RIGHT. RIGHT. LOG. RIGHT. SELECT.
 
         MAKE I:
 
            MAKE 1/2:
            RIGHT. EXP. SELECT.
            EXP. LEFT. SELECT.
            RIGHT. LOG. LEFT. SELECT.
            LOG. RIGHT. SELECT.
            EXP. LEFT. SELECT.
            
            END MAKE 1/2
            
         RIGHT. 
            
            MAKE -1:
 
               MAKE 1/K:
               RIGHT. EXP. SELECT.
               LEFT. LOG. RIGHT. SELECT.
               EXP. LEFT. SELECT.
               
               MARK AS makenumsign
               LOG. RIGHT. SELECT.
               
               END MAKE 1/K
               
            LEFT. 
            END MAKE -1
            
         EXP. LEFT. SELECT.
         RIGHT. 
         END MAKE I
 
         (reciprocal)
         RIGHT. EXP. LEFT. SELECT.
         RIGHT. LOG. RIGHT. SELECT.
         LEFT. LEFT. EXP. SELECT.
         RIGHT. LOG. LEFT. SELECT.
         EXP. RIGHT. SELECT.
 
         ADD:
         RIGHT. EXP. LEFT. SELECT.
         RIGHT. RIGHT. EXP. LEFT. LEFT. LEFT. LEFT. LEFT. LEFT. LEFT. LEFT. SELECT.
         RIGHT. RIGHT. RIGHT. RIGHT. RIGHT. RIGHT. RIGHT. 
            
            (multiply)
            RIGHT. RIGHT. EXP. LEFT. LEFT. SELECT.
            RIGHT. RIGHT. EXP. LEFT. SELECT.
            RIGHT. LOG. RIGHT. SELECT.
            LEFT. 
         LOG. RIGHT. SELECT.
         LEFT. 
         END ADD
         
      PRINT. 
   END. 
   END IF (negtest)
   

######GENERATION CODE######
init(3,3,50)
input()
re()
output()
var('x')
ifzero('zerotest')
go(5)
makezero()
output()
halt()
endif('zerotest')
#outputleft(-getoffset('x'))
fetch('x')
var('x')
output()
ifnonpositive('negtest')
go(1)
makei()
#outputleft(-getoffset('x'))
add(getoffset('x'))
output()
els('negtest')
go(1)
makei()
reciprocal()
add(getoffset('x'))
output()
endif('negtest')
writetofile('padtest')






















